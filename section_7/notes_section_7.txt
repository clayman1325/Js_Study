# HTML DOM AND JAVASCRIPT

What is is and how to connect HTML with JS.

## Nodes and elements
    types of objects
    Query DOM Nodes and transversing the DOM
    Evaluating and manipulatend nodes
    How can be add and remove nodes.

## DOM Document object m0del

    ### Javascript (hosted language by JS ENgine and apis)
        cnst titleEL = document.QuerySelector("h1")
    ### HTML
        exposes web api to allow js to work with the parsed document
          copy the DOM
        <body>
            <h1> Welcome </h1>
        </body>
        parsed and rendered by the browser

    ### Document
        Root Dom node
        provides acces to element quering DOM content
        Document is a variable containing all the elements and DOM functions

    ### Window
        the active Browser Window/ tab
        HOLDS ALL THE NATIVE FUNCTIONS BUILD IN Javascrit to interact wit html


    ### the DOM
        HTML
        HEAD
        title
        BODY
        HEADER
        H1

    ### Querying Elements
        * HTML
        quaerySelector() getElementById()
            Return single elements
            Different wais of quering elements(by CSS Selectors by ID)
            Direct reference to DOM element is returned.
        *JS
        querySelectorAll(),
        getElementByTagName(),
            Return cillections of elements arra like NodeList
            Different Ways of quering elements by Css selectors tag name by css class
            querySelectorAll returns a non-live NodeList getXByY return live NodeList.


    ### Nodes
        Everithing in HTML that make up the DOM
        HTML are element nodes
        text create text Nodes
        attributes creates attribute nodes.

    ### Elements
        elements are one type of nodes.
        Special properties and metods to interact wih elements

        when you get an element JS has incorporated most of the CSS properties so it is possible to
        change style on the fly by altering any of the css property via
            const h1 = document.getElementById("h1")
            h1.style.color     = "blue"
            h1.backgroundColor = "red"
        also you can manipulate and transform any of the node properties such as text
            h1.textContent = "David eres un Excellente Software Engineer"

    ### Attributes vs Properties
        often but not always attributes are mapped to properties.
        Some attributes has live sync with the properties (js)

        attributes in HTML Code.
        properties are the mapping of html Attributes in JS object

        <input name="email">
        input.name

        for instance document.querySelectorAll('li') does not give you a live list it is a Node DS list while:
        document.getElementsByTagName("li") Does because is a HTMLcollection

    ### Children vs child nodes
        ul.children produce a HTML COllection list.
        ul.childNodes produce a list of NODEList that containg all the elements of the HTML document.

        it is the difference between child or elementCHild as well.

        using Parent Element or parent Node it happen the same. Elements does not include text elements.

    ### Ancestors and siblings
        use closest method li,first.closest('body')
        previeusSibling
        previousElementSibling
        nextSibling
        nextSiblingElement.

    ###Summary
        Transversal the node with getElements functions only when the relationship is obvious and it will be less
        likely to change and experience a weird beheavior. Also when the code is easy to read.

    ### styling elements
        * inline style via style property.
        * via ClassName
        *via classList. which is a JS object.

    ### Adding elements
        There are some methods that allow to inject new elements into the HTML and there are some differences in performas to do it in different ways. On one hand there is innerHTML attribute that can be updated with = opperator and also the methods such as .insertAdjacentHTML, The difference is that with the first one you delete all the elements decendednt to the curren node that is updating its inned HTML and if you are manually apending the prev content like doing  const div.innerHTML = innerHTML + "<p> something </p>" will re render all the prev innerHTML. A better approach will be to use the method .insertAdjacentHTML that will only create the new html element and append to the prev one.

        There is another alternative to create elements and inject them to the HTML code




