# Basic syntax and functions
    dive into core syntax
    variables and data types
    operators
    explore and use functions.

# Seting up the project
    First download the scaffold of the calculator project from the Udemy course.

    verify that the html is working fine and add a app.js file in scripts to add more js functionalities.
        to BEGIN with try only one alert mesage that will pop up when the calculator renders

        to do that there exist different ways using the <script> tag and appending the code between its open and close tags. However
        that is not a good practices as long as it wont be clean nor easy to mantain when the js growths. And because now a days JS
        can growth significantly its prefere to split all the js code separate from the HTML or css code and import it (unless the amount of code
        is short as it should be in framewokrs such as React or Vue js).

        In this case what can be done is inject the JS code to the html throuhg importing the app.js file in the scripts folder in the HTML index
        file seting the correct url in src attribute of the <script> tagg.

        commit: 46635835b1f4f79094ea60d7ec47a370dc936529

# Variables
    What is allowed and what is not allowed
    Describe what the variable stores
    camel case  and case sensitive.
    only letters and digits
    $ is allowed (weird though)
    _ is allowed not so weird.

    let currentResult;  // This variable is declared but not defined or initialized

    ; is the symbol to end the line of a word or sentence.

# operators
    syntax that allow us to manipulate variables values.


# Numbers
    integers
    float
    strings  '' "" ``
        string contatenation is done using ` ${ } ` backticks and operators that can be called template literal.
        '\ ' a backslash scapes the meaning of the followin character to add special characters to a string
        such as backspace \n etc


    commit: 18fdd82cd47ef2464cec500bc3412abb49f7c121\

# Constant
    variables that could not change its value.


1st assigment

commit: 42b3d58e1d2618e09c0368c6da1ae266c7d6e174

# Functions
    Code on de mand
    define a code that can be reused in the future,
        take parameters, has body that will execute something and returns a value.

    The code of a function only gets run when the function has been sent.

    allow to brake the top bottom logic of the code run and allow us to run code only when something happened.
    such as events of the user like the click of a button or going ot a new page.

    A function can be called indirectly if the function is passed by argument. This means that you want to send the function elsewere in the code and dont want to exectute inmediately. In such cases the funcion is sent and the
    execution of the funcion happens inside the other function with the paramenters and values of that future moment.

# code styles
    There is a difference between working correct code and wirting readable code. The first one looks to avoid syntax errors and writing readable, properly formatted code.

    whitespacces line breaks and identation are totally optional.



# Convert data types
    because JS is weekly typed and everything that comes from user imputs is tretaed as a string input iit is necesary
    to parse the value to integeger or float when the desired input value is a number.

    to do this parseInt(stringValue) or parseFloat(stringValue) help to do the task.

# Spliot code into functions
    FOllowing the develppment of the calculator it is necessary to read information from the user and manipulate that data to show the corresponding desired value regarding the operation that the user selects. In order to get the value from the user javascriot provides a method called document.getElementById("id") in order to fetch the data from the HTML elements that has the id "id". To recognize which operation the user want to perform is necessary to detect which button does the user clicled. To do so an event listener is attached to each button like this
    BtnName.addEventListener('click', function); where BtnName corresponds to the HTML element of the button wth on particular operation sign asigned. The "click" is the Javascriot method that look for click in that element and triggers the funcion associated in function argument.

    once you finis adding the diferent set of 4 operations methods and the corresponding valies for the description calculation it is a good practice to once the code is functional check if it could look better performing one refactor.



